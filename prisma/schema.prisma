generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Product {
  id                     String         @id @default(uuid())
  name                   String
  priceInPence           Int
  description            String
  lengthInMm             Int
  widthInMm              Int
  heightInMm             Int
  isAvailableForPurchase Boolean        @default(true)
  availableQuantity      Int
  filePath               String 
  createdAt              DateTime       @default(now())
  updatedAt              DateTime       @updatedAt
  orders                 OrderItem[]
  downloadVerifications  DownloadVerification[]
  colours                ProductColour[]
  categories             ProductCategory[]
  images                 Image[]
}

model GlobalCategory {
  id        String         @id @default(uuid())
  name      String         @unique
  products  ProductCategory[]
}

model ProductCategory {
  id           String        @id @default(uuid())
  product      Product       @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId    String
  globalCategory GlobalCategory  @relation(fields: [globalCategoryId], references: [id], onDelete: Cascade)
  globalCategoryId String
}

model Image {
  id        String   @id @default(uuid())
  url       String
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  orders    Order[]
}

model Order {
  id                   String            @id @default(uuid())
  userId               String
  user                 User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  items                OrderItem[]
  shippingAddress      ShippingAddress?
  shippingAddressId    String?           @unique
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @default(now())
}

model OrderItem {
  id           String   @id @default(uuid())
  quantity     Int
  priceInPence Int
  colour       String?
  productId    String
  orderId      String
  product      Product  @relation(fields: [productId], references: [id], onDelete: Restrict)
  order        Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())
}

model ShippingAddress {
  id         String   @id @default(uuid())
  line1      String
  city       String
  postalCode String
  country    String
  orderId    String   @unique
  order      Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model DownloadVerification {
  id        String   @id @default(uuid())
  expiresAt DateTime
  createdAt DateTime @default(now())
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model GlobalColour {
  id        String         @id @default(uuid())
  name      String         @unique
  products  ProductColour[]
}

model ProductColour {
  id           String        @id @default(uuid())
  product      Product       @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId    String
  globalColour GlobalColour  @relation(fields: [globalColourId], references: [id], onDelete: Cascade)
  globalColourId String
}

model Cart {
  id        String      @id @default(uuid())
  items     CartItem[]
  totalAmount Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CartItem {
  id        String   @id @default(uuid())
  cartId    String
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  productId String
  quantity  Int
  colour    String
  price     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}
